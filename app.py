from utils import load_json
from utils import get_response_from_model
import streamlit as st

config = load_json('config.json')

# –ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Deploy
st.markdown(
    r"""
    <style>
    .stDeployButton {
            visibility: hidden;
        }
    </style>
    """, unsafe_allow_html=True
)

st.sidebar.image('madame_coco_pink.jpg')

grid = [col for col in st.sidebar.columns(2)]

# with grid[0]:
#    st.image('uralitech_logo_ru.png')

st.sidebar.text("  ")

# –ø–æ–ª–Ω–∞—è —á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
def clear():
	if hasattr(st.session_state, 'messages'):
		del st.session_state.messages

# —á–∏—Å—Ç–∫–∞ —Ä–∞–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def clear_first_messages(keep):
    del st.session_state.messages[0:-keep*2]



# –ß–∞—Ç
with st.chat_message("assistant", avatar="ü§ñ"):
    st.write(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')

if "messages" not in st.session_state:
    st.session_state.messages = []

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ —á–∞—Ç–µ
for message in st.session_state.messages:
    if message["role"] == "user":
        avatar = "üßë‚Äçüé®"
    else:
        avatar = "ü§ñ"

    with st.chat_message(message["role"], avatar=avatar):
        st.markdown(message["content"])

# –≤–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å"):

    # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "user",
                                      "content": prompt})

    # –≤—ã–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with st.chat_message("user", avatar="üßë‚Äçüé®"):
        st.markdown(prompt)

    # –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã

    with st.chat_message("assistant", avatar="ü§ñ"):
        response = st.write_stream(get_response_from_model(config = config,
                                             user_input=prompt) )


    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    st.session_state.messages.append({"role": "assistant",
                                      "content": response})


st.sidebar.divider()

grid = [col for col in st.sidebar.columns(2)]
with grid[1]:
     container = st.container()
     container.button('–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç', on_click=clear, use_container_width=True)



